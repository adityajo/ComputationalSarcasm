package hello  ;
import java.io.IOException;
import java.util.Date;
public class mymodel {
	
	public String[] iterationvals ;

	public static int Z; // number of topics
	public int W; // vocabulary
	public static int D; // number of documents
	private static long N; // total word occurrences
	private static int L ; // labels
	private static int S ; // number of sentiment

	private  long[][] Nd_z_l ; // Count document level topic and label
	private  long[] Nd_l ; // Count document level label
	private  long[][][] Nws_s_zl ; //Count word level sentiment topic and label
	private  long[][] Nws_zl ; // Count word level topic and label
	private  long[][][] Nws_w_zs; //count word wi with sentiment s topic z
	private long[][]  Nws_zs ; //count words with topic z sentiment s
	private long[][] Nws_s_l ; // count words with sentiment s and label l 
	private long[] Nws_l ; // count words with label l (sentiment words only)
	private long[][] Nws_w_s; //Count times word w occurs as sentiment with sentiment s
	private long[] Nws_s ; // count times sentiment s occurs
	private long[][] Nwt_w_z ; //count word w with topic z 
	private long[] Nwt_z ; //count words with topic z
	private String[] map_id_word ;
	
	
	private int[][] is_di; // Switch for dth document ith word
	private int[][] sentiment ; //Sentiment of dth document ith word
	
	private double[] is_w ;
	
	public int[] label ; // label of dth document
	public int[] topic ; //topic of dth document

	
	public double[][] P_z_l ;
	public double[][][] P_s_zl ;
	public double[][] P_w_z ;
	public double[][][] P_w_zs ;
	public double[][] P_s_l ;
	public double[][] P_w_s ;
	
	String path_result_prefix = "/home/prayas/topic-model-data/results/result-" ; 
	String path_result ;
	WriteFile writer ;
	
	public int[][] w_di; // w_di[d][i] = i'th word in the d'th document

	public int num_samples;
	
	private double alpha_num , 
				alpha_den , 
				beta_1_num ,
				beta_1_den,
				beta_2_num,
				beta_2_den , 
				gamma_num , 
				gamma_den , 
				delta_1_num , 
				delta_1_den , 
				delta_2_num ,
				delta_2_den ;

	
	
	public void estimate(int[] label, int[][] w_di,double[] is_w, String[] map_id_word, int W, int D, int Z, int L, int S ,  int burnIn, int samples, int step,int result_path_suffix) {
		System.out.println("Estimation started!");
		
		
		
		
		path_result = path_result_prefix + String.valueOf(result_path_suffix) + ".txt" ;
		writer = new WriteFile(path_result) ;
		
		this.w_di = w_di;
		this.label= label ;
		this.Z = Z;
		this.L = L ;
		this.S = S ;
		this.W = W;
		this.D = D;
		this.is_w = is_w ;
		this.map_id_word = map_id_word ;
		
		iterationvals = new String[samples] ;

		alpha_num = 1 ;
		alpha_den = Z ;
		beta_1_num = 1 ;
		beta_1_den = S ;
		beta_2_num = 1 ;
		beta_2_den = 1 ;
		gamma_num = 1 ;
		gamma_den = W ;
		delta_1_num =1 ;
		delta_1_den = W ;
		delta_2_num = 1; 
		delta_2_den = 1; 

		P_z_l = new double[Z][L] ;
		P_s_zl = new double[S][Z][L] ;
		P_w_z = new double[W][Z] ;
		P_w_s = new double[W][S] ;
		P_w_zs = new double[W][Z][S] ;
		P_s_l = new double[S][L] ;
		
		
		
		
		
//		b_wz = loadbetapriors(lr, beta_prior);
//		a_z = loadalphapriors(alpha_prior);

		num_samples=0 ;
		Nd_z_l= new long[Z][L] ;
		Nd_l = new long[L] ;
		
		Nws_s_zl = new long[S][Z][L];
		Nws_zl = new long[Z][L] ;
		
		is_di = new int[D][] ;
		sentiment = new int[D][] ;
		topic = new int[D] ;
		
		Nws_w_zs = new long[W][Z][S] ;
		Nws_zs = new long[Z][S] ;
		
		Nws_s_l = new long[S][L];
		Nws_l = new long[L] ;
		
		Nws_w_s = new long[W][S] ;
		Nws_s = new long[S] ;
		
		Nwt_w_z = new long[W][Z] ;
		Nwt_z = new long[Z] ;

		for(int d=0;d<D;d++){
			topic[d]= (int) (Math.random()*Z) ;
		}
		
		for(int d=0;d<w_di.length;d++){
			is_di[d] = new int[w_di[d].length] ;
			sentiment[d] = new int[w_di[d].length] ;
			for(int i=0;i<w_di[d].length;i++){
				
				try
				{
					is_di[d][i] = (int) (Math.random()*2) ;
				}
				catch (NullPointerException e){
					System.out.println(e.getMessage());
					System.out.println(String.valueOf(d)+" "+String.valueOf(i)+" "+String.valueOf(w_di[d].length)) ;
					return ;
				}
				if(is_di[d][i]==1)
					sentiment[d][i]= (int) (Math.random()*S) ;
				else
					sentiment[d][i] =-1 ;
			}
		}
	

		for(int d=0;d<D;d++){
			Nd_z_l[topic[d]][label[d]]++ ;
			Nd_l[label[d]]++ ; 
		}

		for(int d=0;d<D;d++){
			int z =topic[d] ;
			int l =label[d] ;
			for(int i=0;i<w_di[d].length;i++){
				long w = w_di[d][i];				
				int is = is_di[d][i];				
				int s = sentiment[d][i];
				
				if(is==1){
					Nws_s_zl[s][z][l]++ ;
					Nws_w_zs[(int) w][z][s]++ ;
					Nws_zs[z][s]++  ;
					Nws_zl[z][l]++; 
					Nws_s_l[s][l]++ ;
					Nws_l[l]++ ;
					Nws_w_s[(int)w][s]++ ;
					Nws_s[s]++ ;
				}
				else {
					Nwt_z[z]++  ;
					Nwt_w_z[(int)w][z]++ ;
				}

			}		

		}




		// perform Gibbs sampling
		for (int iteration=0; iteration<burnIn+samples*step; iteration++) {
			//System.out.println("");
			//System.out.print("Iteration");
			//System.out.println(iteration);
			
			for (int d=0; d<D; d++) { // document d
				
				if (w_di[d] == null){
					System.out.println("*");
					continue;
				}
				int l=label[d];
				int z=topic[d] ;
				
				//Estimate probability of z/l
				double[] p = new double[Z] ;
				Nd_z_l[z][l]--;
				Nd_l[l]-- ;
				//System.out.println(Nd_z_l[z][l]);
			//	System.out.println(Nd_l[l]);
				//System.out.println(w_di[d].length);
				
				for(int i=0;i<w_di[d].length;i++){
					
					int w = w_di[d][i] ;
					int s = sentiment[d][i] ;
					if(s==-1 && is_di[d][i]==1){
						System.out.println(String.valueOf(i)+" "+String.valueOf(d));
						System.out.println("Shit! Screwed");
						return ;
					}
					if(is_di[d][i]==1){
						Nws_s_zl[s][z][l]-- ;
						Nws_zl[z][l]-- ;
						Nws_w_zs[w][z][s]-- ;
						Nws_zs[z][s]-- ;
						Nws_s_l[s][l] -- ;
						Nws_l[l]-- ;
						Nws_w_s[(int)w][s]-- ;
						Nws_s[s]-- ;
					}else{
						Nwt_w_z[w][z]-- ;
						Nwt_z[z]-- ;
						
					}
				}

				// Sample z  ~ P(z/l) * for all words of doc d with is=1 P(s/z,l,is=1) * P(w/s,z,is=1) 
					// * for all with is=0 P(w/z,is=0)
				
				for(z=0;z<Z;z++){
					
					p[z] = (double)(Nd_z_l[z][l]+alpha_num)/
							(Nd_l[l]+alpha_den) ;
					
					//assert
					if(p[z]==0){
						System.out.println("--------------Shit! Screwed"+
								"-------------------------------------") ;
					}
					
					for(int i=0;i<w_di[d].length;i++){
						int s=sentiment[d][i] ;
						int w= w_di[d][i] ;
						if(is_di[d][i]==1){
							
							double p_s_l = (double)(Nws_s_l[s][l] + beta_1_num)/
										(Nws_l[l] + beta_1_den) ;
							p[z]=p[z]* (double)(Nws_s_zl[s][z][l]+beta_2_num*p_s_l)/
									(Nws_zl[z][l]+beta_2_den);
							double p_w_s = (double)(Nws_w_s[w][s]+delta_1_num)/
										(Nws_s[s]+ delta_1_den) ;
							p[z] = p[z]*(double)(Nws_w_zs[w][z][s] + p_w_s*delta_2_num)/
										(Nws_zs[z][s]+ delta_2_den)  ;
										
							if(p_s_l==0 || p[z]==0 || p_w_s==0 ){
								System.out.println("Why meeee") ;
								System.out.println(p_s_l) ;
								System.out.println(p[z]) ;
								System.out.println(p_w_S) ;
								System.out.println("Why meeee") ;
								return ;
									
							}
						
						}
						else if(is_di[d][i]==0){
							p[z]=p[z]* (double)(Nwt_w_z[w][z]+gamma_num)/
										(Nwt_z[z]+gamma_den) ;
												
							if(p[z]==0){
								System.out.println("--No please! no-- " ) ;
								System.out.println(z) ;
								
							}
							
							
						}
						
					}
				
				}
				double totalsum =0 ;
				for( z=0;z<Z;z++){
					totalsum+=p[z] ;
				}
				
				for( z=0;z<Z;z++){
					p[z]/=totalsum ;
						
				}
				
				
				double val = Math.random() ;
				
				z = 0; while ((val -= p[z]) > 0) z++;  // select a new topic
				
				Nd_z_l[z][l]++;
				Nd_l[l]++ ;
				topic[d]=z ;
				
				
				for(int i=0;i<w_di[d].length;i++){
					int s= sentiment[d][i] ;
					int w =w_di[d][i] ;
					if(is_di[d][i]==1){
						Nws_s_zl[s][z][l]++ ;
						Nws_zl[z][l]++ ;
						Nws_w_zs[w][z][s]++ ;
						Nws_zs[z][s]++ ;
						Nws_s_l[s][l]++ ;
						Nws_l[l]++ ;
						Nws_w_s[(int)w][s]++ ;
						Nws_s[s]++ ;
					}else {
						Nwt_w_z[w][z]++ ;
						Nwt_z[z]++ ;
					}
				}
				
				for (int i=0; i<w_di[d].length; i++) { // position i
					// Aadi: Go over each word of all documents
					
					int w = w_di[d][i];				// Aadi: Which word is this?
					int is = is_di[d][i];				//whether it is a topic word or sentiment word
					int s = sentiment[d][i] ; 							//sentiment of word
					if(is==0){
						Nwt_w_z[w][z]-- ;
						Nwt_z[z]-- ;
					}else if(is==1){
						Nws_s_zl[s][z][l]-- ;
						Nws_zl[z][l]-- ;
						Nws_w_zs[w][z][s]-- ;
						Nws_zs[z][s]-- ;
						Nws_s_l[s][l]-- ;
						Nws_l[l]-- ;
						Nws_w_s[(int)w][s]-- ;
						Nws_s[s]-- ;
					}
					val = Math.random() ;
					if(val<is_w[w])
						is_di[d][i]=0 ;
					else
						is_di[d][i]=1 ;
					is= is_di[d][i] ;
					
					if(is==0){
						Nwt_w_z[w][z]++ ;
						Nwt_z[z]++ ;
						sentiment[d][i]=-1 ;
					}else if(is==1){
						
						// Sample s ~ P(s|z,l,is=1). P(w|s,z,is=1)
						
						p = new double[S];

						double p_w_zs; 
						double p_s_zl; 
						double p_s_l ;
						
						double total =0 ;
						for( s=0;s<S;s++){
							p_s_l = (double)(Nws_s_l[s][l] + beta_1_num)/
								(Nws_l[l] + beta_1_den) ;
							p_w_zs=(double)(Nws_w_zs[w][z][s]+1)/
									(Nws_zs[z][s]+S) ;
							p_s_zl = (double)(Nws_s_zl[s][z][l]+beta_2_num*p_s_l)/
									(Nws_zl[z][l]+beta_2_den) ;
							p[s] = (double)p_w_zs*p_s_zl ;
							if(p_s_l==0 || p_w_zs==0 || p_s_zl==0 ||p_s_zl>1 || p_w_zs>1 || p_s_zl>1 )
								System.out.println("error is here bro" ) ;
							total+=p[s] ;
						}
						for( s=0;s<S;s++)
							p[s]/=total ;
						val = Math.random();
					
 						s=0;while ((val -= p[s]) > 0) s++;
 						sentiment[d][i]=s ;
 						if(s>1)
 							System.out.println("Ohhhh" ) ;
 							 
 						Nws_s_zl[s][z][l]++ ;
						Nws_zl[z][l]++ ;
						Nws_w_zs[w][z][s]++ ;
						Nws_zs[z][s]++ ;
						Nws_s_l[s][l]++ ;
						Nws_l[l]++ ;
					}

				
				}	
			}	

			// update parameter estimates
			if (iteration >= burnIn && (iteration-burnIn)%step==0) {	

					// P(z|l)
					for(int z=0;z<Z;z++){
						for(int l=0;l<L;l++){
							P_z_l[z][l] += (double)(Nd_z_l[z][l]+alpha_num)/
										(Nd_l[l]+alpha_den) ;
						}
					}
					//P(s/l,is=1)
					double p_s_l[][] = new double[S][L] ;
					for(int l=0;l<L ;l++){
						for(int s=0;s<S;s++){
							p_s_l[s][l] = (double)(Nws_s_l[s][l] + beta_1_num)/
										(Nws_l[l] + beta_1_den) ;
							P_s_l[s][l]+= (double)(Nws_s_l[s][l] + beta_1_num)/
										(Nws_l[l] + beta_1_den) ;
						}
					}
					//P(s|z,l,is=1)
					for(int z=0;z<Z;z++){
						for(int l=0;l<L;l++){
							for(int s=0;s<S;s++){
								P_s_zl[s][z][l]+= (double)(Nws_s_zl[s][z][l]+ beta_2_num*p_s_l[s][l])/
											(Nws_zl[z][l]+beta_2_den) ;
							}
						}
					}
					//P(w|z,is=0)
					for(int z =0;z<Z;z++){
						for(int w=0;w<W;w++){
							P_w_z[w][z]+= (double)(Nwt_w_z[w][z]+gamma_num)/
										(Nwt_z[z]+gamma_den) ;
						}
					}
					//P(w/s, is=1)
					double[][] p_w_s = new double[W][S] ;
					for(int s=0;s<S;s++){
						for(int w=0;w<W;w++){
							p_w_s[w][s] = (double)(Nws_w_s[w][s]+delta_1_num)/
										(Nws_s[s]+ delta_1_den) ;
							P_w_s[w][s] += (double)(Nws_w_s[w][s]+delta_1_num)/
										(Nws_s[s]+ delta_1_den) ;
						}
					}
					
					
					//P(w|s,z,is=1)
					for(int s=0;s<S;s++){
						for(int z=0;z<Z;z++){
							for(int w=0;w<W;w++){
								P_w_zs[w][z][s]+= (double)(Nws_w_zs[w][z][s] + p_w_s[w][s]*delta_2_num)/
											(Nws_zs[z][s]+ delta_2_den) ; 
							}
						}
					}
					
					
					
					log_likelihood() ;
					
			}

		
			

		}
		//Normalize P(z|l)
		for(int l=0;l<L;l++){
			double totalsum =0 ;
			for(int z=0;z<Z;z++){
				totalsum+=P_z_l[z][l] ;
			}
			for(int z=0;z<Z;z++){
				P_z_l[z][l]/=totalsum ;
				if(P_z_l[z][l]==0)
					System.out.println("I am tired now") ;
			}
			
		}
		//Normalize P(s/l ,is= 1)
		for(int l=0;l<L;l++){
			double totalsum = 0 ;
			for(int s=0;s<S;s++){
				totalsum+= P_s_l[s][l] ;
				
			}
			for(int s=0;s<S;s++){
				 P_s_l[s][l]/=totalsum ;
				 if(P_s_l[s][l]==0)
					System.out.println("I am tired now!!!!!!!!") ;
			}	
		}
		
		
		
		//Normalize P(s/z,l,is=1)
		for(int z=0;z<Z;z++){
			for(int l=0;l<L;l++){
				double totalsum =0 ;
				for(int s=0;s<S;s++){
					totalsum+= P_s_zl[s][z][l] ;
				}
				for(int s=0;s<S;s++){
					P_s_zl[s][z][l]/=totalsum  ;
					if(P_s_zl[s][z][l]==0)
						System.out.println("I am tired now! The hardest") ;
				}
				
			}
		}
		// Normalize P(w/z,is=0)
		for(int z=0;z<Z;z++){
			double totalsum=0 ;
			for(int w=0;w<W;w++){
				totalsum+=P_w_z[w][z] ;
			}
			for(int w=0;w<W;w++){
				P_w_z[w][z]/=totalsum ;
			}
		}
		// Normalize P(w/s, is= 1)
		for(int s=0;s<S;s++){
			double total = 0;
			for(int w=0;w<W;w++){
				total+=P_w_s[w][s] ;
			}
			for(int w=0;w<W;w++){
				P_w_s[w][s]/=total ;
			}
		}
		
		// Normalize P(w/s,z,is=1)
		for(int z=0;z<Z;z++){
			for(int s=0;s<S;s++){
				double total= 0;
				for(int w=0;w<W;w++){
					total+=P_w_zs[w][z][s] ;
				}
				for(int w=0;w<W;w++){
					P_w_zs[w][z][s]/=total ;
				}
				
				
			}
		}
		
		
		
		writer.close() ;
		assert_model() ;
		
		
	}




	private void assert_model(){
		//Assert P_z_l
		//System.out.println("Assert p_z_l") ;
		//for(int l=0;l<L;l++){
		//	double total = 0 ;
		//	for(int z=0;z<Z;z++){
		//		total+= P_z_l[z][l] ;
		//		System.out.print(String.valueOf(P_z_l[z][l])+" " ) ;
		//	
		//	}
		//	System.out.println(total) ;
			
		//}

		//Assert P_s_zl
		System.out.println("Assert p_s_zl") ;
		for(int z = 0 ;z<Z;z++){
			
			
			for(int l=0; l<L;l++){
				double total = 0 ;
				for(int s=0;s<S;s++){
					total+=P_s_zl[s][z][l] ;
					System.out.print(String.valueOf(P_s_zl[s][z][l])+" " ) ;
					
				}	
				System.out.println(total) ;
				
			}
		}
		
	
	}
	
	


	private void log_likelihood() {
		// TODO Auto-generated method stub
		double ll = 0.0d ;
		for(int d=0;d<D;d++){
			int z = topic[d] ;
			int l = label[d] ;
			double p_z_l =(double)(Nd_z_l[z][l]+alpha_num)/(Nd_l[l]+alpha_den) ;
			ll+= Math.log(p_z_l) ;
			//if(Double.isNaN(ll))
			//	System.out.println("1 is the bitch") ;
			for(int i=0;i<w_di[d].length;i++){
				int w = w_di[d][i] ;
				int is= is_di[d][i];
				if(is==0)
					ll+= Math.log(is_w[w]) ;
				else
					ll+= Math.log(1.0d-is_w[w]) ;
			//	if(Double.isNaN(ll))
			//		System.out.println("2 is the bitch") ;	
					
				if(is==1){
					int s= sentiment[d][i] ;
					
					double p_s_l = (double)(Nws_s_l[s][l] + beta_1_num)/(Nws_l[l] + beta_1_den) ;
					//double p_w_zs=(double)(Nws_w_zs[w][z][s]+1)/(Nws_zs[z][s]+S) ;
					double p_s_zl = (double)(Nws_s_zl[s][z][l]+beta_2_num*p_s_l)/(Nws_zl[z][l]+beta_2_den) ;
					ll+= Math.log(p_s_zl) ;
				//	if(Double.isNaN(ll))
				//		System.out.println("3 is the bitch") ;
					
				}
				if(is==0){
					double p_w_z = (double)(Nwt_w_z[w][z]+gamma_num)/(Nwt_z[z]+gamma_den) ;
					ll+=Math.log(p_w_z) ;
				//	if(Double.isNaN(ll))
				//		System.out.println("4 is the bitch") ;
				}
				if(is==1){
					int s = sentiment[d][i] ;
					double p_w_s = (double)(Nws_w_s[w][s]+delta_1_num)/
											(Nws_s[s]+ delta_1_den) ;
					
					double p_w_sz = (double)(Nws_w_zs[w][z][s] + p_w_s*delta_2_num)/
											(Nws_zs[z][s]+ delta_2_den) ; 
					
					ll+=Math.log(p_w_sz) ;
				//	if(Double.isNaN(ll))
				//		System.out.println("5 is the bitch") ;
				}
				
			}
		}
		iterationvals[num_samples++] = String.valueOf(ll) ;
		System.out.print("Sample No:"+ String.valueOf(num_samples)+" ") ;
		System.out.println(ll);
		try {
			writer.write(String.valueOf(ll)) ;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}








	public static long getN() {
		return N;
	}

	public static void setN(long n) {
		N = n;
	}
	
}
