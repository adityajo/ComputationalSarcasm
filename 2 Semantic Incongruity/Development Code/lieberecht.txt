# SVM This is a reimplementation of 'The perfect solution for detecting sarcasm in tweets# not' Lieberecht et al (2013)
#!/usr/bin/python

import sys

import re

f = open(sys.argv[1],'r')
qid = 0
dict = {}
word_count = {}
rev_dict = {}
index = 1

def bigramgen(input):
	input = str(input.strip())
	input = input.lower()
	words = input.split(' ')
	prev_word = 'init'
	output = ''
	for word in words:
		output+= prev_word+word+' '
		prev_word = word

	prev_word = 'init'
	prev_prev_word = 'init'
	for word in words:
		output+= prev_prev_word+prev_word+word+' '
		prev_prev_word = prev_word
		prev_word = word
	output += input.strip()
	return output



# main method starts
for line in f:
	contents = line.split('\t')
	if len(contents) ==2 and "Scene" not in line:
		dialogue = contents[0].lower()
		
		if len(dialogue) == 0:
			continue

		words = re.findall(r"[\w']+|[.:,!?;]",dialogue)
		first_word = words[0]

		stitched = ''
		for word in words:
			stitched+= word+' '
		
		stitched = stitched.strip()
		stitched = bigramgen(stitched)
		words = stitched.split(' ')	
		for word in words:
			if word not in dict:
				dict[word] = index
				rev_dict[index] = word
				index += 1
				word_count[word] = 1
			else:
				word_count[word] += word_count[word] 

f = open(sys.argv[1],'r')
f_o1 = open(sys.argv[2],'w')
f_o1.write('# Vocabulary size:'+str(index)+'\n')
for line in f:
	s_line = ''
	contents = line.split('\t')
	pos_score = 0
	neg_score = 0
	if "Scene" in line:
		qid +=1
		
	
	if len(contents) >=2:
		#print(contents)
		word_ids = [1]
		dialogue = contents[0].lower()
		#dialogue = dialogue + ' '+ getActions(dialogue).lower()
		if len(dialogue) == 0:
			continue
		words = re.findall(r"[\w']+|[.,!?;]",dialogue)
		
		first_word = words[0]
		speaker = first_word+':'
		
		stitched = ''
		for word in words:
			stitched+= word+' '
		
		stitched = stitched.strip()
		stitched = bigramgen(stitched)
		words = stitched.split(' ')
		

		
		
		for word in words:
			if word in dict:
				
				index = dict[word]
				if word_count[word] >= 3:
					word_ids.append(index)
		
		if contents[1].strip().lower() == 'sarcasm':
			label = '+1'
			
		else:
			label = '-1'
		

		word_ids = list(set(word_ids))
		word_ids.sort()
		s_line = label+' ' 
		#print(word_ids)
		for id in word_ids:
			s_line += str(id)+':1 '
		
		
		s_line += '# '+ stitched
		s_line = s_line.strip()
		f_o1.write(s_line+'\n')
		


f = open(sys.argv[3],'r')
f_o2 = open(sys.argv[4],'w')

for line in f:
	s_line = ''
	contents = line.split('\t')
	if "Scene" in line:
		qid +=1
	pos_score = 0
	neg_score = 0
	
	if len(contents) >=2:
		#print(contents)
		word_ids = [1]
		dialogue = contents[0].lower()
		#dialogue = dialogue + ' '+ getActions(dialogue).lower()
		if len(dialogue) == 0:
			continue
		words = re.findall(r"[\w']+|[.,!?;]",dialogue)
		
		first_word = words[0]
		
		stitched = ''
		for word in words:
			stitched+= word+' '
		
		stitched = stitched.strip()
		stitched = bigramgen(stitched)
		words = stitched.split(' ')
		
		
		

		for word in words:
			if word in dict:
				index = dict[word]
				if word_count[word] >= 3:
					word_ids.append(index)
		
		if contents[1].strip().lower() == 'sarcasm':
			label = '+1'
		else:
			label = '-1'
		

		word_ids = list(set(word_ids))
		word_ids.sort()
		s_line = label+' ' 
		#print(word_ids)
		for id in word_ids:
			s_line += str(id)+':1 '
		

		s_line += '# '+stitched
		s_line = s_line.strip()
		f_o2.write(s_line+'\n')
